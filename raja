gjhgjkkjhl<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic-Tac-Toe</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
        }

        h1 {
            color: #333;
        }

        #tic-tac-toe-board {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            grid-template-rows: repeat(3, 100px);
            grid-gap: 5px;
            margin: 20px auto;
            width: 300px;
            height: 300px;
        }

        .cell {
            width: 100px;
            height: 100px;
            border: 2px solid #333;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            cursor: pointer;
            background-color: #fff;
            color: #333;
        }

        .cell.X {
            color: #E74C3C; /* Red for X */
        }

        .cell.O {
            color: #3498DB; /* Blue for O */
        }

        .cell:hover {
            background-color: #f5f5f5;
        }
    </style>
</head>
<body>
    <h1>Tic-Tac-Toe</h1>
    <div id="tic-tac-toe-board"></div>
    <p id="winner-message"></p>

    <script>
        const board = document.getElementById("tic-tac-toe-board");
        const cells = [];
        let currentPlayer = "X";
        let winner = null;

        // Create the Tic-Tac-Toe board
        for (let row = 0; row < 3; row++) {
            for (let col = 0; col < 3; col++) {
                const cell = document.createElement("div");
                cell.classList.add("cell");
                cell.dataset.row = row;
                cell.dataset.col = col;
                cell.addEventListener("click", handleCellClick);
                board.appendChild(cell);
                cells.push(cell);
            }
        }

        function handleCellClick(event) {
            const cell = event.target;

            if (!cellIsEmpty(cell) || winner) {
                return;
            }

            cell.textContent = currentPlayer;
            cell.classList.add(currentPlayer);

            if (checkForWinner()) {
                winner = currentPlayer;
                document.getElementById("winner-message").textContent = Player ${winner} wins!;
            } else if (boardIsFull()) {
                document.getElementById("winner-message").textContent = "It's a draw!";
            } else {
                currentPlayer = currentPlayer === "X" ? "O" : "X";
            }
        }

        function cellIsEmpty(cell) {
            return !cell.classList.contains("X") && !cell.classList.contains("O");
        }

        function checkForWinner() {
            const winningCombinations = [
                [[0, 0], [0, 1], [0, 2]],
                [[1, 0], [1, 1], [1, 2]],
                [[2, 0], [2, 1], [2, 2]],
                [[0, 0], [1, 0], [2, 0]],
                [[0, 1], [1, 1], [2, 1]],
                [[0, 2], [1, 2], [2, 2]],
                [[0, 0], [1, 1], [2, 2]],
                [[0, 2], [1, 1], [2, 0]]
            ];

            for (const combination of winningCombinations) {
                const [a, b, c] = combination;
                if (
                    cells[a[0] * 3 + a[1]].classList.contains(currentPlayer) &&
                    cells[b[0] * 3 + b[1]].classList.contains(currentPlayer) &&
                    cells[c[0] * 3 + c[1]].classList.contains(currentPlayer)
                ) {
                    return true;
                }
            }

            return false;
        }

        function boardIsFull() {
            return cells.every(cell => !cellIsEmpty(cell));
        }
    </script>
</body>
</html>
<html>
	hi fldkjfldjflkdklfjl
	<html/>
